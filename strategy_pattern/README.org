
* Strategy Pattern

#+BEGIN_EXAMPLE
Strategy Pattern 정의
  
-알고리즘군을 정의하고 각각을 캡슐화하여 교환해서 사용할 수 있도록 만든다. 스트래티지를 활용하면 
알고리즘을 사용하는 클라이언트와는 독립적으로 알고리즘을 변경할 수 있다.
#+END_EXAMPLE

건물을 소재로 strategy pattern을 구현해보았다.
Action과 Work라는 인터페이스에서 action()과 work()가 구현되어있고
베이스 클래스에서 상속은 받는 Policeoffice, Firestation, Officetel을 만든 다음
독립적인 기능인 action(), work()를 생성된 클래스와 조립해서 유연하게 사용 가능 하게 만들었다.

첫 패턴을 만들어 봄으로써 드는 생각은,, 고급언어에서는 디자인패턴이 딱히 필요하지 않다는 생각이 든다.
오히려 틀에 억매여서 융통성이 더 없어진 느낌이랄까..
파이썬과 고랭으로 만들면서 언어간의 특이성과 장단점을 체감할 수 있어서 공부용으로 계속 해봐야겠다.
